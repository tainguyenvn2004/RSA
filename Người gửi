import os
import hashlib
from flask import Flask, render_template_string, request
from flask_socketio import SocketIO
from pyngrok import ngrok
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# C·∫•u h√¨nh Flask
app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app)

# T·∫°o kh√≥a RSA
key = RSA.generate(2048)
private_key = key.export_key().decode()
public_key = key.publickey().export_key().decode()

# HTML giao di·ªán ng∆∞·ªùi d√πng
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>K√Ω S·ªë T√†i Li·ªáu An To√†n</title>
    <style>
        /* General Body Styling */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f0f2f5; /* Light gray background */
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: flex-start; /* Align to the top */
            min-height: 100vh;
            color: #333;
        }

        /* Container for the main content */
        .container {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            width: 100%;
            max-width: 900px; /* Wider container */
            box-sizing: border-box;
        }

        /* Headings */
        h1, h2, h3 {
            color: #2c3e50; /* Darker blue-gray */
            text-align: center;
            margin-bottom: 25px;
        }
        h2 {
            font-size: 2em;
            border-bottom: 2px solid #e0e0e0;
            padding-bottom: 15px;
        }
        h3 {
            font-size: 1.3em;
            margin-top: 30px;
            margin-bottom: 10px;
            color: #34495e;
        }

        /* Form Styling */
        form {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px 0;
            border-bottom: 1px solid #e0e0e0;
            margin-bottom: 20px;
        }

        label {
            font-size: 1.1em;
            margin-bottom: 10px;
            font-weight: 600;
        }

        input[type="file"] {
            border: 1px solid #ced4da;
            padding: 10px;
            border-radius: 8px;
            background-color: #f8f9fa;
            cursor: pointer;
            width: calc(100% - 22px); /* Adjust for padding and border */
            max-width: 400px;
            margin-bottom: 15px;
        }

        button {
            background-color: #007bff; /* Primary blue */
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 1.1em;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 10px rgba(0, 123, 255, 0.2);
        }

        button:hover {
            background-color: #0056b3; /* Darker blue on hover */
            transform: translateY(-2px); /* Slight lift effect */
        }

        button:active {
            transform: translateY(0); /* Press down effect */
        }

        /* Textarea Styling for Outputs */
        textarea {
            width: calc(100% - 24px); /* Adjust for padding and border */
            padding: 12px;
            margin-bottom: 20px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            font-family: 'Consolas', 'Monaco', monospace; /* Monospaced font for code/hash */
            font-size: 0.95em;
            background-color: #f8f9fa; /* Light background for textareas */
            color: #495057;
            resize: vertical; /* Allow vertical resizing */
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .container {
                margin: 15px;
                padding: 20px;
            }
            h2 {
                font-size: 1.8em;
            }
            h3 {
                font-size: 1.2em;
            }
            button {
                padding: 10px 20px;
                font-size: 1em;
            }
        }

        @media (max-width: 480px) {
            body {
                padding: 10px;
            }
            .container {
                padding: 15px;
            }
            input[type="file"] {
                width: 100%;
            }
            textarea {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîê K√Ω S·ªë T√†i Li·ªáu An To√†n</h1>
        <h2>T·∫£i l√™n & K√Ω s·ªë file t√†i li·ªáu</h2>

        <form action="/upload" method="post" enctype="multipart/form-data">
            <label for="documentFile">Ch·ªçn file t√†i li·ªáu c·ªßa b·∫°n:</label>
            <input type="file" name="file" id="documentFile" accept=".txt,.pdf,.docx,.doc"> <button type="submit">T·∫£i l√™n & K√Ω s·ªë</button>
        </form>

        {% if private_key %}
            <hr style="border: 0; height: 1px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.15), rgba(0, 0, 0, 0)); margin: 30px 0;">

            <h3>üîë Kh√≥a ri√™ng (Private Key):</h3>
            <textarea rows="12" cols="80" readonly>{{ private_key }}</textarea>

            <h3>üåø Kh√≥a c√¥ng khai (Public Key):</h3>
            <textarea rows="12" cols="80" readonly>{{ public_key }}</textarea>

            <h3>#Ô∏è‚É£ M√£ bƒÉm (Hash SHA-256):</h3>
            <textarea rows="3" cols="80" readonly>{{ file_hash }}</textarea>

            <h3>‚úçÔ∏è Ch·ªØ k√Ω s·ªë:</h3>
            <textarea rows="6" cols="80" readonly>{{ signature }}</textarea>
        {% endif %}
    </div>
</body>
</html>
'''

@app.route('/', methods=['GET'])
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/upload', methods=['POST'])
def upload():
    uploaded_file = request.files['file']
    if uploaded_file.filename == '':
        return "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn."

    file_data = uploaded_file.read()

    # T√≠nh hash SHA-256
    hash_obj = SHA256.new(file_data)
    file_hash = hash_obj.hexdigest()

    # K√Ω s·ªë: M√£ h√≥a hash b·∫±ng kh√≥a ri√™ng
    signature = pkcs1_15.new(key).sign(hash_obj)

    return render_template_string(
        HTML_TEMPLATE,
        private_key=private_key,
        public_key=public_key,
        file_hash=file_hash,
        signature=signature.hex()
    )

# Ngrok token (thay YOUR_NGROK_TOKEN b·∫±ng token th·∫≠t c·ªßa b·∫°n)
NGROK_AUTH_TOKEN = "2x78kyYgoItDVATusfDXfO8EB92_7BsHuMDhvAYST2gRrDws2"
ngrok.set_auth_token(NGROK_AUTH_TOKEN)
public_url = ngrok.connect(5000)
print(f"Trang web ƒëang ch·∫°y t·∫°i: {public_url}")

# Ch·∫°y Flask server
socketio.run(app, port=5000, allow_unsafe_werkzeug=True)

